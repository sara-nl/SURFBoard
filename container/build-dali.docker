FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04

ENV LD_LIBRARY_PATH /usr/local/cuda/lib64:$LD_LIBRARY_PATH
ENV LC_ALL C

# Linux libraries
RUN apt-get -y update && apt-get -y install --allow-downgrades  --allow-change-held-packages --no-install-recommends make \
        build-essential \
        zlib1g-dev \
        libncurses5-dev \
        libxml2-dev \
        git \
        curl \
        vim \
        wget \
        nano \
        libjpeg-dev \
        libpng-dev \
        gfortran \
        ca-certificates \
        apt-transport-https \
        gnupg \
        software-properties-common && \
    rm -rf /var/lib/apt/lists/*

# CMake
RUN CMAKE_VERSION=3.11 && \
    CMAKE_BUILD=3.11.4 && \
    curl -L https://cmake.org/files/v${CMAKE_VERSION}/cmake-${CMAKE_BUILD}.tar.gz | tar -xzf - && \
    cd /cmake-${CMAKE_BUILD} && \
    ./bootstrap --parallel=$(grep ^processor /proc/cpuinfo | wc -l) && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install && \
    cd / && rm -rf /cmake-${CMAKE_BUILD}

ENV PYTHON_VERSION=3.6
ENV DALI_VERSION=0.18

ENV FFMPEG_VERSION=4.2.1
ENV BOOST_VERSION=1_66_0
ENV PROTOBUF_VERSION=3.11.1
ENV LMDB_VERSION=0.9.22
ENV JPEG_TURBO_VERSION=2.0.2
ENV OPENCV_VERSION=3.4.3
ENV LIBTIFF_VERSION=4.0.10
ENV CLANG_VERSION=6.0.1 
ENV FLAC_VERSION=1.3.3
ENV OGG_VERSION=1.3.4
ENV VORBIS_VERSION=1.3.6
ENV LIBSND_VERSION=1.0.28

ENV NVIDIA_DRIVER_CAPABILITIES=video,compute,utility 

# Install Python 3.6 on top of Miniconda, all in a single pass
RUN curl -o /tmp/miniconda.sh -O  https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh  && \
     chmod +x /tmp/miniconda.sh && \
     /tmp/miniconda.sh -b -p /opt/conda && \
     rm /tmp/miniconda.sh && \
     /opt/conda/bin/conda install -y python=${PYTHON_VERSION} 

# Add Conda exe to the PATH
ENV PATH /opt/conda/bin:$PATH

# Install DALI

# DALI dependencies
RUN apt-get update && apt-get install -y yasm doxygen graphviz autoconf libtool

# Boost
RUN cd /usr/local && \
    curl -L https://dl.bintray.com/boostorg/release/1.66.0/source/boost_${BOOST_VERSION}.tar.gz | tar -xzf - && \
    ln -s ../boost_${BOOST_VERSION}/boost include/boost && cd -

# protobuf 
RUN curl -L https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/protobuf-all-${PROTOBUF_VERSION}.tar.gz | tar --no-same-owner -xzf - && \
    cd /protobuf-${PROTOBUF_VERSION} && \
    ./autogen.sh && \
    ./configure CXXFLAGS="-fPIC" --prefix=/usr/local --disable-shared 2>&1 > /dev/null && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install 2>&1 > /dev/null && \
    cd / && rm -rf /protobuf-${PROTOBUF_VERSION}

# LMDB
COPY patches/Makefile-lmdb.patch /opt/
RUN git clone -b LMDB_${LMDB_VERSION} --single-branch https://github.com/LMDB/lmdb && \
    cd /lmdb/libraries/liblmdb && \
    patch -p3 < /opt/Makefile-lmdb.patch && \
    rm -f /opt/Makefile-lmdb.patch && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install && \
    cd / && rm -rf /lmdb

# libjpeg-turbo
RUN curl -L https://github.com/libjpeg-turbo/libjpeg-turbo/archive/${JPEG_TURBO_VERSION}.tar.gz | tar -xzf - && \
    cd libjpeg-turbo-${JPEG_TURBO_VERSION} && \
    cmake -G"Unix Makefiles" -DENABLE_SHARED=TRUE -DCMAKE_INSTALL_PREFIX=/usr/local . 2>&1 >/dev/null && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install 2>&1 >/dev/null && \
    cd / && rm -rf /libjpeg-turbo-${JPEG_TURBO_VERSION}

# libtiff
# Note: libtiff should be built with support for zlib. If running this step alone on a custom
# system, zlib should be installed first
RUN cd /tmp && \
    curl -L http://download.osgeo.org/libtiff/tiff-${LIBTIFF_VERSION}.tar.gz | tar -xzf - && \
    cd tiff-${LIBTIFF_VERSION} && \
    ./autogen.sh && \
    ./configure --prefix=/usr/local && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && \
    make install && \
    cd / && \
    rm -rf /tmp/tiff-${LIBTIFF_VERSION}

# OpenCV
RUN curl -L https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xzf - && \
    cd /opencv-${OPENCV_VERSION} && mkdir build && cd build && \
    cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DBUILD_SHARED_LIBS=OFF \
          -DWITH_CUDA=OFF -DWITH_1394=OFF -DWITH_IPP=OFF -DWITH_OPENCL=OFF -DWITH_GTK=OFF \
          -DBUILD_JPEG=OFF -DWITH_JPEG=ON \
          -DBUILD_TIFF=OFF -DWITH_TIFF=ON \
          -DBUILD_DOCS=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_PNG=ON \
          -DBUILD_opencv_cudalegacy=OFF -DBUILD_opencv_stitching=OFF \
          -DWITH_TBB=OFF -DWITH_OPENMP=OFF -DWITH_PTHREADS_PF=OFF -DWITH_CSTRIPES=OFF .. && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install && \
    cd / && rm -rf /opencv-${OPENCV_VERSION}

# Clang
RUN cd /usr/local && \
    wget http://releases.llvm.org/${CLANG_VERSION}/clang+llvm-${CLANG_VERSION}-x86_64-linux-sles11.3.tar.xz && \
    tar -xJf clang+llvm-${CLANG_VERSION}-x86_64-linux-sles11.3.tar.xz --strip 1 --no-same-owner && \
    rm clang+llvm-${CLANG_VERSION}-x86_64-linux-sles11.3.tar.xz && cd /

# FFmpeg
RUN cd /opt && wget https://developer.download.nvidia.com/compute/redist/nvidia-dali/ffmpeg-${FFMPEG_VERSION}.tar.bz2 && \
    tar xf ffmpeg-$FFMPEG_VERSION.tar.bz2 && \
    rm ffmpeg-$FFMPEG_VERSION.tar.bz2 && \
    cd ffmpeg-$FFMPEG_VERSION && \
    ./configure \
      --prefix=/usr/local \
      --disable-static \
      --disable-all \
      --disable-autodetect \
      --disable-iconv \
      --enable-shared \
      --enable-avformat \
      --enable-avcodec \
      --enable-avfilter \
      --enable-protocol=file \
      --enable-demuxer=mov,matroska,avi  \
      --enable-bsf=h264_mp4toannexb,hevc_mp4toannexb,mpeg4_unpack_bframes && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && make install && \
    cd / && rm -rf /opt/ffmpeg-$FFMPEG_VERSION

# flac
RUN cd /opt                                                                          && \
    wget http://downloads.xiph.org/releases/flac/flac-${FLAC_VERSION}.tar.xz         && \
    tar -xf flac-$FLAC_VERSION.tar.xz                                                && \
    rm flac-$FLAC_VERSION.tar.xz                                                     && \
    cd flac-$FLAC_VERSION                                                            && \
    ./configure && make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && make install && \
    cd / && rm -rf /opt/flac-$FLAC_VERSION

# libogg
RUN cd /opt                                                                          && \
    wget http://downloads.xiph.org/releases/ogg/libogg-${OGG_VERSION}.tar.gz         && \
    tar -xf libogg-$OGG_VERSION.tar.gz                                               && \
    rm libogg-$OGG_VERSION.tar.gz                                                    && \
    cd libogg-$OGG_VERSION                                                           && \
    ./configure && make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && make install && \
    cd / && rm -rf /opt/libogg-$OGG_VERSION

# libvorbis
# Install after libogg
RUN cd /opt                                                                           && \
    wget http://downloads.xiph.org/releases/vorbis/libvorbis-${VORBIS_VERSION}.tar.xz && \
    tar -xf libvorbis-$VORBIS_VERSION.tar.xz                                          && \
    rm libvorbis-$VORBIS_VERSION.tar.xz                                               && \
    cd libvorbis-$VORBIS_VERSION                                                      && \
    ./configure && make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && make install  && \
    cd / && rm -rf /opt/libvorbis-$VORBIS_VERSION

# libsnd
RUN cd /opt                                                                                                    && \
    wget https://developer.download.nvidia.com/compute/redist/nvidia-dali/libsndfile-${LIBSND_VERSION}.tar.gz  && \
    tar -xf libsndfile-$LIBSND_VERSION.tar.gz                                                                  && \
    rm libsndfile-$LIBSND_VERSION.tar.gz                                                                       && \
    cd libsndfile-$LIBSND_VERSION                                                                              && \
    ./configure && make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && make install                           && \
    cd / && rm -rf /opt/libsnd-$LIBSND_VERSION

# DALI

# build flags
ENV DALI_CMAKE_BUILD_TYPE=RelWithInfo
ENV DALI_BUILD_TEST=OFF
ENV DALI_BUILD_BENCHMARK=ON
ENV DALI_BUILD_NVTX=ON
ENV DALI_BUILD_PYTHON=ON
ENV DALI_BUILD_LMDB=ON
ENV DALI_BUILD_JPEG_TURBO=ON
ENV DALI_BUILD_NVJPEG=ON
ENV DALI_BUILD_LIBTIFF=ON
ENV DALI_BUILD_NVOF=OFF
ENV DALI_BUILD_NVDEC=ON
ENV DALI_BUILD_LIBSND=ON
ENV DALI_BUILD_NVML=OFF
ENV DALI_BUILD_FFTS=ON
ENV DALI_VERBOSE_LOGS=ON
ENV DALI_WERROR=OFF
ENV DALI_BUILD_WITH_ASAN=OFF
ENV DALI_NVIDIA_BUILD_ID=12345

COPY patches/dali_bundle_wheel.patch /opt/
RUN git clone https://github.com/NVIDIA/dali -b release_v${DALI_VERSION} && \
    cd dali && git submodule update --init --recursive && \
    patch -p1 < /opt/dali_bundle_wheel.patch && \
    mkdir build && \
    cd build && \
    LD_LIBRARY_PATH="${PWD}:${LD_LIBRARY_PATH}"         \
    cmake ../ -DCMAKE_INSTALL_PREFIX=.                  \
      -DCUDA_TARGET_ARCHS=${DALI_CUDA_TARGET_ARCHS}     \
      -DCMAKE_BUILD_TYPE=${DALI_CMAKE_BUILD_TYPE}       \
      -DBUILD_TEST=${DALI_BUILD_TEST}                   \
      -DBUILD_BENCHMARK=${DALI_BUILD_BENCHMARK}         \
      -DBUILD_NVTX=${DALI_BUILD_NVTX}                   \
      -DBUILD_PYTHON=${DALI_BUILD_PYTHON}               \
      -DBUILD_LMDB=${DALI_BUILD_LMDB}                   \
      -DBUILD_JPEG_TURBO=${DALI_BUILD_JPEG_TURBO}       \
      -DBUILD_NVJPEG=${DALI_BUILD_NVJPEG}               \
      -DBUILD_LIBTIFF=${DALI_BUILD_LIBTIFF}             \
      -DBUILD_NVOF=${DALI_BUILD_NVOF}                   \
      -DBUILD_NVDEC=${DALI_BUILD_NVDEC}                 \
      -DBUILD_LIBSND=${DALI_BUILD_LIBSND}               \
      -DBUILD_NVML=${DALI_BUILD_NVML}                   \
      -DBUILD_FFTS=${DALI_BUILD_FFTS}                   \
      -DVERBOSE_LOGS=${DALI_VERBOSE_LOGS}               \
      -DWERROR=${DALI_WERROR}                           \
      -DBUILD_WITH_ASAN=${DALI_BUILD_WITH_ASAN} && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && cd /

# Build wheel
RUN apt-get install -y --no-install-recommends unzip zip

# Install very specific version of patchelf
ENV PATCHELF_VERSION 2a9cefd7d637d160d12dc7946393778fa8abbc58
RUN curl -fsSL -o patchelf.tar.gz https://github.com/NixOS/patchelf/archive/$PATCHELF_VERSION.tar.gz && \
    tar -xzf patchelf.tar.gz && \
    cd patchelf-$PATCHELF_VERSION && \
    ./bootstrap.sh && \
    ./configure && \
    make install && cd /

RUN cd /dali/build && \
    pip wheel -v dali/python \
        --build-option --python-tag=cp36-cp36m \ 
        --build-option --plat-name=manylinux1_x86_64 \
        --build-option --build-number=${DALI_NVIDIA_BUILD_ID} && \
    ../dali/python/bundle-wheel.sh nvidia_dali[_-]*.whl

